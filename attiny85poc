/*******************************************************************
 Figure out a combination of libraries, pin assignments and timing
 that works on an ATTiny85
 * Servo
 * Ping sensor
 * PWM LED
 *******************************************************************/

#include <Adafruit_SoftServo.h>  // SoftwareServo (works on non PWM pins)
#include <NewPing.h>

#define LED_PIN 0
#define SERVO_PIN 1   // Servo control line (orange)
#define TRIG_PIN 3
#define ECHO_PIN 4

#define SERVO_MAX 180
int servoPos = 0;
int servoStep = 5;
#define SERVO_MOVEMENT_DELAY_MS 15

Adafruit_SoftServo myServo;

int ledLevel;

#define PING_SAMPLES 5
#define MAX_DISTANCE_CM 200
#define DISTANCE_DELTA_THRESHOLD_CM 5
#define LOOP_MIN_TIME_MS 80
#define LOOP_TIMER_STEP_MS 5
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE_CM); // NewPing setup of pins and maximum distance.
int dist, prev_dist;


int getDistanceCM() {
// Return smoothed ping sensor reading
  int sum = 0, min = 9999, max = -1;
  for (int i = 0; i < PING_SAMPLES; i++) {
    int sample = sonar.ping_cm();
    if (sample < min) min = sample;
    if (sample > max) max = sample;
    sum += sample;
  }
  sum -= (min + max);
  return (sum / (PING_SAMPLES - 2));
}

void setup() {
  ledLevel = 0;
  for (int i=0; i<=255; i+=5) {
    analogWrite(LED_PIN, i);
    delay(50);
  }

  myServo.attach(SERVO_PIN);

  for (int i=SERVO_MAX; i>=0; i-=10) {
    myServo.write(i);
    myServo.refresh();
    delay(SERVO_MOVEMENT_DELAY_MS);
  }
  for (int i=0; i<=SERVO_MAX; i+=10) {
    myServo.write(i);
    myServo.refresh();
    delay(SERVO_MOVEMENT_DELAY_MS);
  }

 for (int i=255; i>0; i-=5) {
    analogWrite(LED_PIN, i);
    delay(10);
  }
  delay(500);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
 
  dist = getDistanceCM();
}


void loop()  {
  int loop_timer = millis();
  prev_dist = dist;
  dist = getDistanceCM();
 
 /*
  // debug: blink the distance
  for (int i=0; i<=dist; i++) {
    analogWrite(LED_PIN, 255);
    delay(300);
    analogWrite(LED_PIN, 0);
    delay(300);
  }
  */
  if (abs(prev_dist - dist) > DISTANCE_DELTA_THRESHOLD_CM ) {
    ledLevel = 0;
    do {
      analogWrite(LED_PIN, ledLevel);
      ledLevel += 2;
      servoPos+=servoStep;
      myServo.write(servoPos);
      myServo.refresh();
      delay(SERVO_MOVEMENT_DELAY_MS);
    } while (servoPos <= SERVO_MAX && servoPos >= 0);
    servoStep *=-1;
  }

  analogWrite(LED_PIN, 0);

  while ((millis() - loop_timer) < LOOP_MIN_TIME_MS) {
    delay(LOOP_TIMER_STEP_MS);
  }
}
